#!/bin/bash

# the orignal script location: http://www.raspberryconnect.com/images/autohotspotN/autohotspotN1:w
# relative artical: http://www.raspberryconnect.com/network/item/330-raspberry-pi-auto-wifi-hotspot-switch-internet

#version 0.89-N/HS-I

#You may share this script but a reference to RaspberryConnect.com must be included in copies or derivatives of this script. 

#Wifi & Hotspot with Internet
#A script to switch between a wifi network and an Internet routed Hotspot
#Raspberry Pi with a network port required for Internet in hotspot mode.
#Works at startup or with a seperate timer or manually without a reboot
#Other setup required find out more at
#http://www.raspberryconnect.com


#These four lines capture the wifi networks the RPi is setup to use
#wpassid=$(awk '/ssid="/{ print $0 }' /etc/wpa_supplicant/wpa_supplicant.conf | awk -F'ssid=' '{ print $2 }' ORS=',' | sed 's/\"/''/g' | sed 's/,$//')

WIRED_IF_NAME='eth0'
WIRELESS_IF_NAME='wlan0'
WIRELESS_IF_STATIC_DEF_FILE=/home/pi/pi3/autohotspot/interfaces.wlan0static
WPA_SUP_CONF='/etc/wpa_supplicant/wpa_supplicant.conf'

set -x

ad_hoc_activated()
{
	systemctl status hostapd | grep -q "(running)"
}

activate_ad_hoc()
{
	echo "activate ad hoc"
	ad_hoc_activated && return 0

	ifup -i $WIRELESS_IF_STATIC_DEF_FILE $WIRELESS_IF_NAME

	#iptables -t nat -A POSTROUTING -o $WIRED_IF_NAME -j MASQUERADE
	#iptables -A FORWARD -i $WIRED_IF_NAME -o $WIRELESS_IF_NAME -m state --state RELATED,ESTABLISHED -j ACCEPT
	#iptables -A FORWARD -i $WIRELESS_IF_NAME -o $WIRED_IF_NAME -j ACCEPT

	systemctl start dnsmasq
	systemctl start hostapd

	#echo 1 > /proc/sys/net/ipv4/ip_forward
}

flush_wireless_interface()
{
	#ip link set dev $WIRELESS_IF_NAME down
	ip addr flush dev $WIRELESS_IF_NAME
	#ip link set dev $WIRELESS_IF_NAME up
}

deactivate_ad_hoc()
{
	echo "deactivate ad hoc"
	ad_hoc_activated || return 0

	#echo 0 > /proc/sys/net/ipv4/ip_forward

	systemctl stop hostapd
	systemctl stop dnsmasq


	#iptables -t nat -D POSTROUTING -o $WIRED_IF_NAME -j MASQUERADE
	#iptables -D FORWARD -i $WIRED_IF_NAME -o $WIRELESS_IF_NAME -m state --state RELATED,ESTABLISHED -j ACCEPT
	#iptables -D FORWARD -i $WIRELESS_IF_NAME -o $WIRED_IF_NAME -j ACCEPT

	ifdown -i $WIRELESS_IF_STATIC_DEF_FILE $WIRELESS_IF_NAME
	flush_wireless_interface
}

wifi_activated()
{
	wpa_cli status | grep -q 'ip_address'
}

get_wpa_state()
{
	echo -n "$(wpa_cli status | sed -n 's/wpa_state=\(.*\)/\1/p')"
}

activate_wifi()
{
	echo "activate wifi"
	#wifi_activated && return 0

	ifup $WIRELESS_IF_NAME 2>/dev/null

	if [ "$(get_wpa_state)" == "SCANNING" ]
	then
		wpa_cli reassociate
	fi
}

deactivate_wifi()
{
	echo "deactivate wifi"
	wifi_activated || return 0

	ifdown $WIRELESS_IF_NAME

	flush_wireless_interface

	#wpa_cli terminate >/dev/null 2>&1
	#rm -rf /var/run/wpa_supplicant

}

scan_ssids()
{
	echo -n $(iw dev $WIRELESS_IF_NAME scan ap-force | \
			  sed -n 's/[[:space:]]*SSID:[[:space:]]*\(.*\)/\1/p')
}

get_ssids_configured()
{
	echo -n $(sed -n 's/.*ssid="[[:space:]]*\(.*\)"/\1/p' $WPA_SUP_CONF)
}

ssid_available()
{
	ssids_online="$(scan_ssids)"
	ssids_configured="$(get_ssids_configured)"

	#Enter the Routers Mac Addresses for hidden SSIDs, seperated by spaces
	mac=""
	ssidsmac="$ssids_configured $mac" #combines ssid and MAC for checking

	#Check to see what SSID's and MAC addresses are in range
	for ssid in $ssidsmac
	do
		 echo "$ssids_online" | grep -q "$ssid" && return 0
	done

	return 1
}

[[ $(whoami) == 'root' ]] || {
	echo "should only be run by root" >&2
	exit 1
}

if ssid_available
then
	deactivate_ad_hoc
	activate_wifi
else
	deactivate_wifi
	activate_ad_hoc
fi

