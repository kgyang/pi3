#!/bin/bash

# the orignal script location: http://www.raspberryconnect.com/images/autohotspotN/autohotspotN1:w
# relative artical: http://www.raspberryconnect.com/network/item/330-raspberry-pi-auto-wifi-hotspot-switch-internet

#version 0.89-N/HS-I

#You may share this script but a reference to RaspberryConnect.com must be included in copies or derivatives of this script. 

#Wifi & Hotspot with Internet
#A script to switch between a wifi network and an Internet routed Hotspot
#Raspberry Pi with a network port required for Internet in hotspot mode.
#Works at startup or with a seperate timer or manually without a reboot
#Other setup required find out more at
#http://www.raspberryconnect.com


WIRED_IF_NAME='eth0'
WIRELESS_IF_NAME='wlan0'
WIRELESS_IF_STATIC_CONF=/home/pi/pi3/autohotspot/interfaces.wlan0.static
WPA_SUP_CONF='/etc/wpa_supplicant/wpa_supplicant.conf'

enter_accesspoint_mode()
{
	ifup -i $WIRELESS_IF_STATIC_CONF $WIRELESS_IF_NAME

	systemctl start dnsmasq
	systemctl start hostapd

	#iptables -t nat -A POSTROUTING -o $WIRED_IF_NAME -j MASQUERADE
	#iptables -A FORWARD -i $WIRED_IF_NAME -o $WIRELESS_IF_NAME -m state --state RELATED,ESTABLISHED -j ACCEPT
	#iptables -A FORWARD -i $WIRELESS_IF_NAME -o $WIRED_IF_NAME -j ACCEPT
	#echo 1 > /proc/sys/net/ipv4/ip_forward
}

quit_accesspoint_mode()
{
	#echo 0 > /proc/sys/net/ipv4/ip_forward
	#iptables -t nat -D POSTROUTING -o $WIRED_IF_NAME -j MASQUERADE
	#iptables -D FORWARD -i $WIRED_IF_NAME -o $WIRELESS_IF_NAME -m state --state RELATED,ESTABLISHED -j ACCEPT
	#iptables -D FORWARD -i $WIRELESS_IF_NAME -o $WIRED_IF_NAME -j ACCEPT

	systemctl stop hostapd
	systemctl stop dnsmasq

	ifdown -i $WIRELESS_IF_STATIC_CONF $WIRELESS_IF_NAME
	ip addr flush dev $WIRELESS_IF_NAME
}

enter_station_mode()
{
	ifup $WIRELESS_IF_NAME 2>/dev/null
}

quit_station_mode()
{
	ifdown $WIRELESS_IF_NAME
	ip addr flush dev $WIRELESS_IF_NAME
}

run_as_station_mode()
{
	if is_connected
	then
		return 0
	elif has_ssid
	then
		wpa_cli reassociate
	else
		quit_station_mode
		enter_accesspoint_mode
	fi
}

run_as_accesspoint_mode()
{
	if has_ssid
	then
		quit_accesspoint_mode
		enter_station_mode
	fi
}

get_wdev_info()
{
	local attr=$1
	echo -n $(iw dev $WIRELESS_IF_NAME info | grep $attr | awk '{print $2}')
}

get_wdev_type()
{
	get_wdev_info 'type'
}

is_connected()
{
	[[ -n "$(get_wdev_info 'ssid')" ]]
}

has_ssid()
{
	local ssids_online="$(iw dev $WIRELESS_IF_NAME scan ap-force | \
		sed -n 's/[[:space:]]*SSID:[[:space:]]*\(.*\)/\1/p')"

	local ssids_configured="$(sed -n 's/.*ssid="[[:space:]]*\(.*\)"/\1/p' $WPA_SUP_CONF)"

	#Enter the Routers Mac Addresses for hidden SSIDs, seperated by spaces
	local mac=""
	local ssidsmac="$ssids_configured $mac" #combines ssid and MAC for checking

	#Check to see what SSID's and MAC addresses are in range
	for ssid in $ssidsmac
	do
		 echo "$ssids_online" | grep -q "$ssid" && return 0
	done

	return 1
}

# start from here
[[ $(whoami) == 'root' ]] || {
	echo "should only be run by root" >&2
	exit 1
}

case $(get_wdev_type) in
	"managed") run_as_station_mode;;
	"AP")      run_as_accesspoint_mode;;
	*)         ;;
esac

